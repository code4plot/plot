Sys.getenv("plotly_username")
install.packages("plotly")
install.packages("tidyverse")
library(ggplot2)
setwd("D:/plot/real_estate")
#choose condo project to visualize
projectName = "THE HILLFORD"
#load raw data
rawDat = "rawDat_191028.csv"
rawDat = read.csv(rawDat, stringsAsFactors = F)
#subset to analyze condominiums and executive condominiums
condo = subset(rawDat, propertyType %in% c("Non-landed Properties", "Executive Condominium"))
District = condo$district[which(condo$project == projectName)][1]
#plot S$ per square feet (psf)
s = ggplot(subset(condo, district == District), aes(x = as.factor(leaseDate), y = psf, group = 1)) +
stat_summary(fun.y = "median", geom = "line", color = "black", size = 1.2) +
stat_summary(fun.y = function(z) {quantile(z, 0.25) }, geom = "line", color = "grey") +
stat_summary(fun.y = function(z) {quantile(z, 0.75) }, geom = "line", color = "grey") +
geom_jitter(data = subset(condo, project == projectName), aes(color = as.factor(noOfBedRoom)), position = position_jitter(0.2), size = 2) +
labs(y = "S$ per square feet", x = "Lease Date (Quarterly)", color = "# Bed Room") +
ggtitle("Rental Stats @ THE HILLFORD") +
theme_bw() +
theme(plot.title = element_text(size = 20, hjust = 0.5))
dev.new(width = 20, height = 12, unit = "cm")
s
#plot rent per month
t = ggplot(subset(condo, district == District), aes(x = as.factor(leaseDate), y = rent, group = 1)) +
stat_summary(fun.y = "median", geom = "line", color = "black", size = 1.2) +
stat_summary(fun.y = function(z) {quantile(z, 0.25) }, geom = "line", color = "grey") +
stat_summary(fun.y = function(z) {quantile(z, 0.75) }, geom = "line", color = "grey") +
geom_jitter(data = subset(condo, project == projectName), aes(color = as.factor(noOfBedRoom)), position = position_jitter(0.2), size = 2) +
labs(y = "S$ per month", x = "Lease Date (Quarterly)", color = "# Bed Room") +
ggtitle("Rental Stats @ THE HILLFORD") +
theme_bw() +
theme(plot.title = element_text(size = 20, hjust = 0.5))
dev.new(width = 20, height = 12, unit = "cm")
t
#choose condo project to visualize
projectName = readline(prompt="Enter Project Name: ")
if(projectName == ""){
projectName = "THE HILLFORD"
}
#load raw data
rawDat = "rawDat_191028.csv"
rawDat = read.csv(rawDat, stringsAsFactors = F)
#plot S$ per square feet (psf)
s = ggplot(subset(condo, district == District), aes(x = as.factor(leaseDate), y = psf, group = 1)) +
stat_summary(fun.y = "median", geom = "line", color = "black", size = 1.2) +
stat_summary(fun.y = function(z) {quantile(z, 0.25) }, geom = "line", color = "grey") +
stat_summary(fun.y = function(z) {quantile(z, 0.75) }, geom = "line", color = "grey") +
geom_jitter(data = subset(condo, project == projectName), aes(color = as.factor(noOfBedRoom)), position = position_jitter(0.2), size = 2) +
labs(y = "S$ per square feet", x = "Lease Date (Quarterly)", color = "# Bed Room") +
ggtitle("Rental Stats @ THE HILLFORD") +
theme_bw() +
theme(plot.title = element_text(size = 20, hjust = 0.5))
dev.new(width = 20, height = 12, unit = "cm")
s
#plot S$ per square feet (psf)
s = ggplot(subset(condo, district == District), aes(x = as.factor(leaseDate), y = psf, group = 1)) +
stat_summary(fun.y = "median", geom = "line", color = "black", size = 1.2) +
stat_summary(fun.y = function(z) {quantile(z, 0.25) }, geom = "line", color = "grey") +
stat_summary(fun.y = function(z) {quantile(z, 0.75) }, geom = "line", color = "grey") +
geom_jitter(data = subset(condo, project == projectName), aes(color = as.factor(noOfBedRoom)), position = position_jitter(0.2), size = 2) +
labs(y = "S$ per square feet", x = "Lease Date (Quarterly)", color = "# Bed Room") +
ggtitle(paste("Rental Stats @", projectName)) +
theme_bw() +
theme(plot.title = element_text(size = 20, hjust = 0.5))
s
#plot rent per month
t = ggplot(subset(condo, district == District), aes(x = as.factor(leaseDate), y = rent, group = 1)) +
stat_summary(fun.y = function(z) {quantile(z, 0.25) }, geom = "line", color = "grey") +
geom_jitter(data = subset(condo, project == projectName), aes(color = as.factor(noOfBedRoom)), position = position_jitter(0.2), size = 2) +
ggtitle(paste("Rental Stats @", projectName) +
theme(plot.title = element_text(size = 20, hjust = 0.5))
t
#plot rent per month
t = ggplot(subset(condo, district == District), aes(x = as.factor(leaseDate), y = rent, group = 1)) +
stat_summary(fun.y = "median", geom = "line", color = "black", size = 1.2) +
stat_summary(fun.y = function(z) {quantile(z, 0.25) }, geom = "line", color = "grey") +
stat_summary(fun.y = function(z) {quantile(z, 0.75) }, geom = "line", color = "grey") +
geom_jitter(data = subset(condo, project == projectName), aes(color = as.factor(noOfBedRoom)), position = position_jitter(0.2), size = 2) +
labs(y = "S$ per month", x = "Lease Date (Quarterly)", color = "# Bed Room") +
ggtitle(paste("Rental Stats @", projectName) +
theme_bw() +
theme(plot.title = element_text(size = 20, hjust = 0.5))
#plot rent per month
t = ggplot(subset(condo, district == District), aes(x = as.factor(leaseDate), y = rent, group = 1)) +
#plot S$ per square feet (psf)
s = ggplot(subset(condo, district == District), aes(x = as.factor(leaseDate), y = psf, group = 1)) +
stat_summary(fun.y = "median", geom = "line", color = "black", size = 1.2) +
stat_summary(fun.y = function(z) {quantile(z, 0.25) }, geom = "line", color = "grey") +
stat_summary(fun.y = function(z) {quantile(z, 0.75) }, geom = "line", color = "grey") +
geom_jitter(data = subset(condo, project == projectName), aes(color = as.factor(noOfBedRoom)), position = position_jitter(0.2), size = 2) +
labs(y = "S$ per square feet", x = "Lease Date (Quarterly)", color = "# Bed Room") +
ggtitle(paste("Rental Stats @", projectName)) +
theme_bw() +
theme(plot.title = element_text(size = 20, hjust = 0.5))
s
#plot rent per month
#plot rent per month
t = ggplot(subset(condo, district == District), aes(x = as.factor(leaseDate), y = rent, group = 1)) +
#plot rent per month
t = ggplot(subset(condo, district == District), aes(x = as.factor(leaseDate), y = rent, group = 1)) +
stat_summary(fun.y = "median", geom = "line", color = "black", size = 1.2) +
stat_summary(fun.y = function(z) {quantile(z, 0.25) }, geom = "line", color = "grey") +
stat_summary(fun.y = function(z) {quantile(z, 0.75) }, geom = "line", color = "grey") +
geom_jitter(data = subset(condo, project == projectName), aes(color = as.factor(noOfBedRoom)), position = position_jitter(0.2), size = 2) +
labs(y = "S$ per month", x = "Lease Date (Quarterly)", color = "# Bed Room") +
ggtitle(paste("Rental Stats @", projectName)) +
theme_bw() +
theme(plot.title = element_text(size = 20, hjust = 0.5))
t
source('D:/plot/real_estate/rental_191028.R', echo=TRUE)
install.packages(c("plotly", "shiny"))
library(shiny)
library(plotly)
shinyUI(fluidPage(
# Application title
titlePanel("Condo Project"),
sidebarPanel(
h3("Search for a condo project"),
# Select Justices name here
selectizeInput("name",
label = "condo project",
choices = unique(condo$project),
multiple = F,
options = list(maxItems = 5, placeholder = 'Select a name'),
selected = "THE HILLFORD"),
# Term plot
#plotOutput("termPlot", height = 200),
#helpText("Data: Bailey, Michael, Anton  Strezhnev and Erik Voeten. Forthcoming.  'Estimating Dynamic State Preferences from United Nations Voting Data.' Journal of Conflict Resolution. ")
#),
# Show a plot of the generated distribution
mainPanel(
plotlyOutput("trendPlot")
)
)
)
)
p <- shinyUI(fluidPage(
# Application title
titlePanel("Condo Project"),
sidebarPanel(
h3("Search for a condo project"),
# Select Justices name here
selectizeInput("name",
label = "condo project",
choices = unique(condo$project),
multiple = F,
options = list(maxItems = 5, placeholder = 'Select a name'),
selected = "THE HILLFORD"),
# Term plot
#plotOutput("termPlot", height = 200),
#helpText("Data: Bailey, Michael, Anton  Strezhnev and Erik Voeten. Forthcoming.  'Estimating Dynamic State Preferences from United Nations Voting Data.' Journal of Conflict Resolution. ")
#),
# Show a plot of the generated distribution
mainPanel(
plotlyOutput("trendPlot")
)
)
)
)
api_create(p, filename="rental_plots")
?shinyApp
server = function(input, output, session) {
output$trendPlot <- renderPlotly({
if (length(input$name) == 0) {
input$name = "THE HILLFORD"
}
District = condo$district[which(condo$project == input$name)][1]
#plot S$ per square feet (psf)
ggplot(subset(condo, district == District), aes(x = as.factor(leaseDate), y = psf, group = 1)) +
stat_summary(fun.y = "median", geom = "line", color = "black", size = 1.2) +
stat_summary(fun.y = function(z) {quantile(z, 0.25) }, geom = "line", color = "grey") +
stat_summary(fun.y = function(z) {quantile(z, 0.75) }, geom = "line", color = "grey") +
geom_jitter(data = subset(condo, project == input$name), aes(color = as.factor(noOfBedRoom)), position = position_jitter(0.2), size = 2) +
labs(y = "S$ per square feet", x = "Lease Date (Quarterly)", color = "# Bed Room") +
ggtitle(paste("Rental Stats @", input$name)) +
theme_bw() +
theme(plot.title = element_text(size = 20, hjust = 0.5))
})
}
p <- shinyUI(fluidPage(
# Application title
titlePanel("Condo Project"),
sidebarPanel(
h3("Search for a condo project"),
# Select Justices name here
selectizeInput("name",
label = "condo project",
choices = unique(condo$project),
multiple = F,
options = list(maxItems = 5, placeholder = 'Select a name'),
selected = "THE HILLFORD"),
# Term plot
#plotOutput("termPlot", height = 200),
#helpText("Data: Bailey, Michael, Anton  Strezhnev and Erik Voeten. Forthcoming.  'Estimating Dynamic State Preferences from United Nations Voting Data.' Journal of Conflict Resolution. ")
#),
# Show a plot of the generated distribution
mainPanel(
plotlyOutput("trendPlot")
)
)
)
)
shinyApp(p,server)
p <- shinyUI(fluidPage(
# Application title
titlePanel("Condo Project"),
sidebarPanel(
h3("Search for a condo project"),
# Select Justices name here
selectizeInput("name",
label = "condo project",
choices = unique(condo$project),
multiple = F,
options = list(maxItems = 5, placeholder = 'Select a name'),
selected = "THE HILLFORD"),
# Term plot
plotOutput("termPlot", height = 200),
#helpText("Data: Bailey, Michael, Anton  Strezhnev and Erik Voeten. Forthcoming.  'Estimating Dynamic State Preferences from United Nations Voting Data.' Journal of Conflict Resolution. ")
#),
# Show a plot of the generated distribution
mainPanel(
plotlyOutput("trendPlot")
)
)
)
)
shinyApp(p,server)
test = shinyApp(p,server)
api_create(test)
p <- shinyUI(fluidPage(
# Application title
titlePanel("Condo Project"),
sidebarPanel(
h3("Search for a condo project"),
# Select Justices name here
selectizeInput("name",
label = "condo project",
choices = unique(condo$project),
multiple = F,
options = list(maxItems = 5, placeholder = 'Select a name'),
selected = "THE HILLFORD"),
# Term plot
#plotOutput("termPlot", height = 200),
#helpText("Data: Bailey, Michael, Anton  Strezhnev and Erik Voeten. Forthcoming.  'Estimating Dynamic State Preferences from United Nations Voting Data.' Journal of Conflict Resolution. ")
#),
# Show a plot of the generated distribution
mainPanel(
plotlyOutput("trendPlot")
)
)
)
)
p <- shinyUI(fluidPage(
# Application title
titlePanel("Condo Project"),
sidebarPanel(
h3("Search for a condo project"),
# Select Justices name here
selectizeInput("name",
label = "condo project",
choices = unique(condo$project),
multiple = F,
options = list(maxItems = 1, placeholder = 'Select a name'),
selected = "THE HILLFORD"),
# Term plot
#plotOutput("termPlot", height = 200),
#helpText("Data: Bailey, Michael, Anton  Strezhnev and Erik Voeten. Forthcoming.  'Estimating Dynamic State Preferences from United Nations Voting Data.' Journal of Conflict Resolution. ")
#),
# Show a plot of the generated distribution
mainPanel(
plotlyOutput("trendPlot")
)
)
)
)
shinyApp(p,server)
shinyApp(p,server)
p <- shinyUI(fluidPage(
# Application title
titlePanel("Condo Project"),
sidebarPanel(
h3("Search for a condo project"),
# Select Justices name here
selectizeInput("name",
label = "condo project",
choices = unique(condo$project),
multiple = F,
options = list(maxItems = 1, placeholder = 'Select a name'),
selected = "THE HILLFORD"),
# Term plot
#plotOutput("termPlot", height = 200),
#helpText("Data: Bailey, Michael, Anton  Strezhnev and Erik Voeten. Forthcoming.  'Estimating Dynamic State Preferences from United Nations Voting Data.' Journal of Conflict Resolution. ")
#),
# Show a plot of the generated distribution
mainPanel(
plotlyOutput("trendPlot", width = 600, height = 200)
)
)
)
)
shinyApp(p,server)
p <- shinyUI(fluidPage(
# Application title
titlePanel("Condo Project"),
sidebarPanel(
h3("Search for a condo project"),
# Select Justices name here
selectizeInput("name",
label = "condo project",
choices = unique(condo$project),
multiple = F,
options = list(maxItems = 1, placeholder = 'Select a name'),
selected = "THE HILLFORD"),
# Term plot
plotOutput("termPlot", height = 200),
#helpText("Data: Bailey, Michael, Anton  Strezhnev and Erik Voeten. Forthcoming.  'Estimating Dynamic State Preferences from United Nations Voting Data.' Journal of Conflict Resolution. ")
#),
# Show a plot of the generated distribution
mainPanel(
plotlyOutput("trendPlot", width = 600, height = 200)
)
)
)
)
shinyApp(p,server)
p <- shinyUI(fluidPage(
# Application title
titlePanel("Condo Project"),
sidebarPanel(
h3("Search for a condo project"),
# Select Justices name here
selectInput("name",
label = "condo project",
choices = unique(condo$project),
multiple = F,
options = list(maxItems = 1, placeholder = 'Select a name'),
selected = "THE HILLFORD"),
# Show a plot of the generated distribution
mainPanel(
plotlyOutput("trendPlot", width = 600, height = 200)
)
)
)
)
p <- shinyUI(fluidPage(
# Application title
titlePanel("Condo Project"),
sidebarPanel(
h3("Search for a condo project"),
# Select Justices name here
selectizeInput("name",
label = "condo project",
choices = unique(condo$project),
multiple = F,
options = list(maxItems = 1, placeholder = 'Select a name'),
selected = "THE HILLFORD"),
# Show a plot of the generated distribution
mainPanel(
plotlyOutput("trendPlot", width = 600, height = 200)
)
)
)
)
shinyApp(p,server)
runApp("rentalPlot",display.mode = "showcase")
runApp("rentalPlot",display.mode = "showcase")
runExample("01_hello")
runApp("rentalPlot",display.mode = "showcase")
runExample("01_hello")
runApp("rentalPlot",display.mode = "showcase")
runApp("rentalPlot",display.mode = "showcase")
runApp('rentalPlot')
runApp('rentalPlot')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='plotproject', token='4383A59A10559618D65D33A5EFAA3EBE', secret='5VuZM8H5CmSIUK3xBDSFmuhLfs1X7EUXg7IXGzNc')
library(rsconnect)
rsconnect::deployApp("rentalPlot")
rsconnect::deployApp("rentalPlot")
rsconnect::deployApp("rentalPlot")
nrow(condo)
nrow(rawDat)
write.csv(condo,"rentalPlot\\data\\condo_191028.csv", row.names=F)
runApp('rentalPlot')
runApp('rentalPlot')
runApp('rentalPlot')
runApp('rentalPlot')
runApp('rentalPlot')
runApp('rentalPlot')
rawDat = read.csv("rawDat_191028.csv", stringsAsFactors = F)
unique(rawDat$propertyType)
condo = subset(rawDat, propertyType %in% c("Non-landed Properties","Executive Condominium"))
#remove rows with noOfBedRoom = NA
condo = subset(rawDat, noOfBedRoom != "NA")
head(condo)
#keep columns: project, areaSqft, leaseDate, district, noOfBedRoom, rent, psf
condo = condo[,c("project","areaSqft","leaseDate","district","noOfBedRoom","rent","psf")]
head(condo)
write.csv(condo, "rentalPlot/data/condo_191028.csv", row.names = F)
write.csv(condo, "rentalPlot/data/condo_191028.csv", row.names = F)
runApp('rentalPlot')
runApp('rentalPlot')
runApp('rentalPlot')
runApp('rentalPlot')
runApp('rentalPlot')
runApp('rentalPlot')
runApp('rentalPlot')
runApp('rentalPlot')
runApp('rentalPlot')
runApp('rentalPlot')
runApp('rentalPlot')
runApp('rentalPlot')
