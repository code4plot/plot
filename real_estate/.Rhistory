source("https://raw.githubusercontent.com/farrellja/URD/master/URD-Install.R")
source("https://raw.githubusercontent.com/farrellja/URD/master/URD-Install.R")
source("https://raw.githubusercontent.com/farrellja/URD/master/URD-Install.R")
source("https://raw.githubusercontent.com/farrellja/URD/master/URD-Install.R")
source("https://raw.githubusercontent.com/farrellja/URD/master/URD-Install.R")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("destiny")
source("https://raw.githubusercontent.com/farrellja/URD/master/URD-Install.R")
install.packages("devtools")
install.packages("devtools")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install('Biobase', 'S4Vectors', 'AnnotationDbi', 'destiny'))
BiocManager::install('Biobase', 'S4Vectors', 'AnnotationDbi', 'destiny')
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install('Biobase', 'S4Vectors', 'AnnotationDbi', 'destiny'))
BiocManager::install('Biobase', 'S4Vectors', 'AnnotationDbi', 'destiny')
BiocManager::install('Biobase')
BiocManager::install(c('Biobase', 'S4Vectors', 'AnnotationDbi', 'destiny'))
BiocManager::install(c('sva', 'rhdf5', 'scran'))
install_github(repo="farrellja/URD")
library(devtools)
install_github(repo="farrellja/URD")
install_github(repo="farrellja/URD")
install_github(repo="farrellja/URD")
install_github(repo="farrellja/URD")
remove.packages(digest)
remove.packages("digest")
remove.packages("digest", "D:\mbijlkh\LabFiles\RLibrary")
remove.packages("digest", "D:\\mbijlkh\\LabFiles\\RLibrary")
install_github(repo="farrellja/URD", "D:\\mbijlkh\\LabFiles\\RLibrary")
?install_github
remove.packages("digest")
install_github(repo="farrellja/URD")
install.packages("digest")
library(devtools)
install_github(repo="farrellja/URD")
source("https://raw.githubusercontent.com/farrellja/URD/master/URD-Install.R")
install.packages("BiocInstaller", repos = a["BioCsoft", "URL"])
install.packages("BiocInstaller", repos = a["BioCsoft", "URL"])
source("https://raw.githubusercontent.com/farrellja/URD/master/URD-Install.R")
install.packages("BiocInstaller", repos = a["BioCsoft", "URL"])
source("https://raw.githubusercontent.com/farrellja/URD/master/URD-Install.R")
install.packages("BiocInstaller", repos = a["BioCsoft", "URL"])
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(c('Biobase', 'S4Vectors', 'AnnotationDbi', 'destiny'))
install.packages("BioCInstaller")
source("https://bioconductor.org/biocLite.R")
install.packages("BiocInstaller", repos = a["BioCsoft", "URL"])
source("https://bioconductor.org/biocLite.R")
install.packages("BiocInstaller", repos = a["BioCsoft", "URL"])
install.packages("BiocInstaller", repos = "https://bioconductor.org/packages/3.7/bioc")
install.packages("BiocInstaller", repos = "http://bioconductor.org/packages/3.7/bioc")
install.packages("BiocInstaller", repos = "http://bioconductor.org/packages/3.7/bioc")
source("https://bioconductor.org/biocLite.R")
install.packages("BiocInstaller", repos = a["BioCsoft", "URL"])
BiocInstaller::biocLite(c('Biobase', 'S4Vectors', 'AnnotationDbi', 'destiny'))
.libPaths(c(.libPaths(),"D:/mbijlkh/LabFiles/RLibrary/3.4.X/"))
source("https://bioconductor.org/biocLite.R")
BiocInstaller::biocLite(c('Biobase', 'S4Vectors', 'AnnotationDbi', 'destiny'))
library(devtools)
install.packages(devtools)
install.packages("devtools")
library(devtools)
library(Rcpp)
install.packages("Rcpp", lib = "D:/mbijlkh/LabFiles/RLibrary/3.4.X/")
library(Rcpp)
?library
library(Rcpp,lib.loc = "D:/mbijlkh/LabFiles/RLibrary/3.4.X/")
library(Rcpp,lib.loc = "D:/mbijlkh/LabFiles/RLibrary/3.4.X/file4794419c337d/")
install.packages("Rcpp", lib = "D:/mbijlkh/LabFiles/RLibrary/3.4.X/")
library(Rcpp,lib.loc = "D:/mbijlkh/LabFiles/RLibrary/3.4.X/")
install.packages("Rcpp", lib = "D:/mbijlkh/LabFiles/RLibrary/3.4.X/")
install.packages("Rcpp", lib = "D:/mbijlkh/LabFiles/RLibrary/3.4.X/")
install.packages("Rcpp", lib = "RLibrary/3.4.X/")
library(Rcpp,lib.loc = "RLibrary/3.4.X/")
library(devtools)
install.packages("devtools", lib = "RLibrary/3.4.X/")
.libPaths(c(.libPaths(),"RLibrary/3.4.X/"))
install.packages("devtools", lib = "RLibrary/3.4.X/")
install.packages("C:/Users/mbijlkh/AppData/Local/Temp/RtmpA7UQPn/downloaded_packages/devtools_2.2.1.tar.gz", repos = NULL, type = "source")
.libPaths()
.libPaths("RLibrary/3.4.X/")
install.packages("C:/Users/mbijlkh/AppData/Local/Temp/RtmpA7UQPn/downloaded_packages/devtools_2.2.1.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/mbijlkh/AppData/Local/Temp/RtmpA7UQPn/downloaded_packages/devtools_2.2.1.tar.gz", repos = NULL, type = "source")
.libPaths()
.libPaths(c("RLibrary/3.4.X/", .libPaths()))
.libPaths()
.libPaths(c("C:\\Users\\mbijlkh\\Documents\\RLibrary\\3.4.X", .libPaths()))
.libPaths()
install.packages("C:/Users/mbijlkh/AppData/Local/Temp/RtmpA7UQPn/downloaded_packages/devtools_2.2.1.tar.gz", repos = NULL, type = "source")
install.packages("devtools")
library(devtools)
library(URD)
library(URD,lib.loc = "RLibrary/3.4.X/")
setwd("D:/plot/real_estate")
rawDat = readRDS("rawDat_19q4.rds")
#subset condominiums only
condo = subset(rawDat, propertyType %in% c("Non-landed Properties","Executive Condominium"))
#remove rows with noOfBedRoom = NA
condo = subset(rawDat, noOfBedRoom != "NA")
#keep columns: project, areaSqft, leaseDate, district, noOfBedRoom, rent, psf
condo = condo[,c("project","areaSqft","leaseDate","district","noOfBedRoom","rent","psf")]
condo = condo[,c("areaSqft","leaseDate","district","noOfBedRoom","rent","psf")]
write.csv(condo, "rentalPlot/data/condo_191028.csv", row.names = F)
#subset condominiums only
condo = subset(rawDat, propertyType %in% c("Non-landed Properties","Executive Condominium"))
#remove rows with noOfBedRoom = NA
condo = subset(rawDat, noOfBedRoom != "NA")
#keep columns: project, areaSqft, leaseDate, district, noOfBedRoom, rent, psf
condo = condo[,c("project","areaSqft","leaseDate","district","noOfBedRoom","rent","psf")]
saveRDS(condo, "rentalPlot/byCondo/data/condo_191028.rds")
shiny::runApp('rentalPlot/byCondo')
runApp('rentalPlot/byCondo')
condo$rent <- as.numeric(condo$rent)
saveRDS(condo, "rentalPlot/byCondo/data/condo.rds")
runApp('rentalPlot/byCondo')
