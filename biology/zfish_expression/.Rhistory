library(shiny)
library(plotly)
library(plyr)
##helper functions here
rowMedian = function(df){
df = apply(df, 1, median)
return(df)
}
rowRelative = function(df, ref, logScale = F){
if(tolower(ref) == "median"){
x = rowMedian(df)
} else {
x = df[,ref]
x[which(x == 0)] = 0.001
}
df = df/x
if(logScale == T){
df = log(df,2)
}
return(df)
}
makeExpressionDF = function(df){
temp = stack(df, select = -c(gene_name, gene_id))
times = nrow(temp)/nrow(df)
result = data.frame(gene_id = rep(df$gene_id, times), gene_name = rep(df$gene_name, times),
reads = temp$values, stage = temp$ind, stringsAsFactors = F)
return(result)
}
getData = function(x, suf = "zfish_", ext = ".txt", fromDir = "data/", id = "gene_id"){
if(id == "gene_id"){
y = 1
} else {
y = 2
}
ind = unique(x$fileIndex)
for(i in ind){
genes = x[which(x$fileIndex %in% i), id]
i = as.character(i)
fileName = paste(fromDir,suf,i,ext,sep = "")
temp = read.table(fileName, header = F, sep = "\t", stringsAsFactors = F)
if(!exists("results")){
results = subset(temp, temp[,y] %in% genes)
} else {
results = rbind(results, subset(temp, temp[,y] %in% genes))
}
}
return(results)
}
relcomp <- function(a, b) {
comp <- vector()
for (i in a) {
if (i %in% a && !(i %in% b)) {
comp <- append(comp, i)
}
}
return(comp)
}
#load genes file
gfile = read.table("data/zfish_genes.txt", header = T, sep = "\t", stringsAsFactors = F)
#load sample-stage file
stages = read.table("data/sample-stage.txt", header = T, sep = "\t", stringsAsFactors = F)
stages = c("gene_id", "gene_name", stages$stage)
#cleanup column names
setwd("D:/plot/biology/zfish_expression")
rowMedian = function(df){
df = apply(df, 1, median)
return(df)
}
rowRelative = function(df, ref, logScale = F){
if(tolower(ref) == "median"){
x = rowMedian(df)
} else {
x = df[,ref]
x[which(x == 0)] = 0.001
}
df = df/x
if(logScale == T){
df = log(df,2)
}
return(df)
}
makeExpressionDF = function(df){
temp = stack(df, select = -c(gene_name, gene_id))
times = nrow(temp)/nrow(df)
result = data.frame(gene_id = rep(df$gene_id, times), gene_name = rep(df$gene_name, times),
reads = temp$values, stage = temp$ind, stringsAsFactors = F)
return(result)
}
getData = function(x, suf = "zfish_", ext = ".txt", fromDir = "data/", id = "gene_id"){
if(id == "gene_id"){
y = 1
} else {
y = 2
}
ind = unique(x$fileIndex)
for(i in ind){
genes = x[which(x$fileIndex %in% i), id]
i = as.character(i)
fileName = paste(fromDir,suf,i,ext,sep = "")
temp = read.table(fileName, header = F, sep = "\t", stringsAsFactors = F)
if(!exists("results")){
results = subset(temp, temp[,y] %in% genes)
} else {
results = rbind(results, subset(temp, temp[,y] %in% genes))
}
}
return(results)
}
relcomp <- function(a, b) {
comp <- vector()
for (i in a) {
if (i %in% a && !(i %in% b)) {
comp <- append(comp, i)
}
}
return(comp)
}
#load genes file
gfile = read.table("data/zfish_genes.txt", header = T, sep = "\t", stringsAsFactors = F)
#load sample-stage file
stages = read.table("data/sample-stage.txt", header = T, sep = "\t", stringsAsFactors = F)
stages = c("gene_id", "gene_name", stages$stage)
#cleanup column names
profvis({})
library(shiny)
install.packages("profvis")
library(profvis)
profvis({runApp()})
profvis({runApp()})
profvis({runApp()})
profvis({runApp()})
profvis({runApp()})
#load genes file
rawDat = read.table("zfish_expression.txt", header = T, sep = "\t", stringsAsFactors = F)
#load sample-stage file
stages = read.table("data/sample-stage.txt", header = T, sep = "\t", stringsAsFactors = F)
stages = c("gene_id", stages$stage, "gene_name")
subDat = subset(rawDat, gene_name %in% c("yap1","wwtr1"))
subDat
install.packages("reshape2")
library(reshape2)
df <- melt(subDat)
head(df)
nrow(df)
profvis({runApp()})
runApp()
GEOM_BLANK()
library(ggplot2)
geom_blank()
ggplot() + geom_blank()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
