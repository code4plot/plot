setwd("D:/plot/biology/zfish_expression")
rawDat = read.table("data/zfish_expression.txt", header = T, row.names = F)
rawDat = read.table("data/zfish_expression.txt", header = T, row.names = F, sep = "\t")
rawDat = read.table("data/zfish_expression.txt", header = T, sep = "\t")
head(rawDat)
rawDat = read.table("data/zfish_expression.txt", header = T, sep = "\t", stringsAsFactors = F)
stages = read.table("data/sample-stage.txt", header = T, sep = "\t", stringsAsFactors = F)
stages
library(ggplot2)
is.numeric(rawDat$ovary_sample.txt)
ensemblExamples = c("ENSDARG00000068401","ENSDARG00000067719","ENSDARG00000042934","ENSDARG00000023062","ENSDARG00000077860","ENSDARG00000068409")
colnames(rawDat)
plotDat = subset(rawDat, gene_id %in% ensemblExamples)
plotDat
head(as.vector(plotDat))
genes = cbind(rawDat$gene_id,rawDat$gene_name)
head(genes)
genes = cbind(gene_id = rawDat$gene_id,gene_name = rawDat$gene_name)
head(genes)
colnames(rawDat[,-"gene_name"])
colnames(rawDat[,-c("gene_name")])
test = stack(plotDat, select = -gene_name)
head(test)
test
test = unstack(plotDat, select = -gene_name)
test = unstack(plotDat)
test = t(plotDat)
test = stack(test)
test = stack(plotDat, select = gene_id)
test
test = stack(plotDat)
test
test = stack(plotDat,select = -gene_name - gene_id)
test
test = stack(plotDat,select = -c(gene_name, gene_id))
test
tempValues = stack(plotDat,select = -c(gene_name, gene_id))
head(plotDat)
plotDat = cbind(gene_id = rep(plotDat$gene_id,times), gene_name = rep(plotDat$gene_name, times), reads = tempValues$values, stage = tempValues$ind)
times = nrow(plotDat)
plotDat = cbind(gene_id = rep(plotDat$gene_id,times), gene_name = rep(plotDat$gene_name, times), reads = tempValues$values, stage = tempValues$ind)
times = nrow(tempValues)/nrow(plotDat)
times
tempValues
plotDat
plotDat = subset(rawDat, gene_id %in% ensemblExample)
ensemblExamples = c("ENSDARG00000068401","ENSDARG00000067719","ENSDARG00000042934","ENSDARG00000023062","ENSDARG00000077860","ENSDARG00000068409")
plotDat = subset(rawDat, gene_id %in% ensemblExample)
tempValues = stack(plotDat,select = -c(gene_name, gene_id))
plotDat = subset(rawDat, gene_id %in% ensemblExamples)
tempValues = stack(plotDat,select = -c(gene_name, gene_id))
times = nrow(tempValues)/nrow(plotDat)
plotDat = cbind(gene_id = rep(plotDat$gene_id,times), gene_name = rep(plotDat$gene_name, times), reads = tempValues$values, stage = tempValues$ind)
head(plotDat)
tempValues
head(plotDat)
tempValues$ind
tempValues$values
plotDat = data.frame(gene_id = rep(plotDat$gene_id,times), gene_name = rep(plotDat$gene_name, times), reads = as.tempValues$values, stage = tempValues$ind, stringsAsFactors = F)
plotDat = subset(rawDat, gene_id %in% ensemblExamples)
plotDat = data.frame(gene_id = rep(plotDat$gene_id,times), gene_name = rep(plotDat$gene_name, times), reads = as.tempValues$values, stage = tempValues$ind, stringsAsFactors = F)
plotDat = data.frame(gene_id = rep(plotDat$gene_id,times), gene_name = rep(plotDat$gene_name, times), reads = tempValues$values, stage = tempValues$ind, stringsAsFactors = F)
head(plotDat)
is.numeric(plotDat$reads)
plotDat$stage
plotDat$gene_id
makeExpressionDF = function(df){
temp = stack(df, select = -c(gene_name, gene_id))
times = nrow(temp)/nrow(df)
result = data.frame(gene_id = rep(plotDat$gene_id, times), gene_name = rep(plotDat$gene_name, times),
reads = temp$values, stage = temp$ind, stringsAsFactors = F)
return(result)
}
plotDat = makeExpressionDF(plotDat)
plotDat = subset(rawDat, gene_id %in% ensemblExamples)
plotDat = makeExpressionDF(plotDat)
library(plyr)
?rename
as.list(stages)
as.vector(stages)
as.character(stages)
as.matrix(stages)
as.vector(as.matrix(stages))
stages = read.table("data/sample-stage.txt", header = T, sep = "\t", stringsAsFactors = F,row.names = 1)
stages
as.list(stages)
rename(colnames(plotDat), replace = stages)
plotDat = subset(rawDat, gene_id %in% ensemblExamples)
rename(colnames(plotDat), replace = stages)
colnames(plotDat)
t(stages)
rename(colnames(plotDat), replace = t(stages))
rename(colnames(plotDat), replace = stages)
rename(plotDat, replace = stages)
rename(plotDat, replace = t(stages))
t(stages)
as.vector(t(stages))
stages = read.table("data/sample-stage.txt", header = T, sep = "\t", stringsAsFactors = F)
stages = setNames(stages$stage, stages$sample)
stages
plotDat = rename(plotDat, replace = stages)
plotDat
plotDat = makeExpressionDF(plotDat)
plotDat
s = ggplot(plotDat, aes(x = stage, y = reads, color = gene_name)) +
geom_line() +
labs(y = "gene expression level", x = "developmental stage", color = "gene")
s
s = ggplot(plotDat, aes(x = stage, y = reads, color = gene_name, group = 1)) +
geom_line() +
labs(y = "gene expression level", x = "developmental stage", color = "gene")
s
s = ggplot(plotDat, aes(x = stage, y = reads, color = gene_name, group = gene_name)) +
geom_line() +
labs(y = "gene expression level", x = "developmental stage", color = "gene")
s
s = ggplot(plotDat, aes(x = stage, y = reads, color = gene_name, group = gene_name)) +
geom_line(size = 1.2) +
labs(y = "gene expression level", x = "developmental stage", color = "gene")
s
plotDat = subset(rawDat, gene_id %in% ensemblExamples)
plotDat = subset(rawDat, gene_id %in% ensemblExamples)
plotDat[,2:10]/plotDat[,3]
plotDat[,2:10]
lotDat[,3]
plotDat[,3]
plotDat/plotDat[,3]
plotDat[,2:ncol(plotDat)-1]/plotDat[,3]
ncol(plotDat)-1
plotDat[,2:ncol(plotDat)-1]/plotDat[,3]
2:ncol(plotDat)-1
plotDat[,2:(ncol(plotDat)-1)]/plotDat[,3]
log(0)
log(plotDat[,2:(ncol(plotDat)-1)]-plotDat[,3],2)
log(plotDat[,2:(ncol(plotDat)-1)],2)-log(plotDat[,3],2)
rowMedian = apply(plotDat[,2:(ncol(plotDat)-1)], 1, median)
rowMedian
apply(plotDat[,2:(ncol(plotDat)-1)], 1, median)
plotDat[,2:(ncol(plotDat)-1)]/rowMedian
plotDat[,2:(ncol(plotDat)-1)]
plotDat[,2:(ncol(plotDat)-1)] = plotDat[,2:(ncol(plotDat)-1)]/rowMedian
plotDat = rename(plotDat, replace = stages)
plotDat = makeExpressionDF(plotDat)
s = ggplot(plotDat, aes(x = stage, y = reads, color = gene_name, group = gene_name)) +
geom_line(size = 1.2) +
labs(y = "gene expression level", x = "developmental stage", color = "gene")
s
plotDat = subset(rawDat, gene_id %in% ensemblExamples)
rowMedian = apply(plotDat[,2:(ncol(plotDat)-1)], 1, mean)
plotDat[,2:(ncol(plotDat)-1)] = plotDat[,2:(ncol(plotDat)-1)]/rowMedian
plotDat = rename(plotDat, replace = stages)
plotDat = makeExpressionDF(plotDat)
s = ggplot(plotDat, aes(x = stage, y = reads, color = gene_name, group = gene_name)) +
geom_line(size = 1.2) +
labs(y = "gene expression level", x = "developmental stage", color = "gene")
s
plotDat = subset(rawDat, gene_id %in% ensemblExamples)
rowMedian = apply(plotDat[,2:(ncol(plotDat)-1)], 1, median)
plotDat[,2:(ncol(plotDat)-1)] = plotDat[,2:(ncol(plotDat)-1)]/rowMedian
plotDat = rename(plotDat, replace = stages)
plotDat = makeExpressionDF(plotDat)
s = ggplot(plotDat, aes(x = stage, y = reads, color = gene_name, group = gene_name)) +
geom_line(size = 1.2) +
labs(y = "gene expression level", x = "developmental stage", color = "gene")
s
plotDat = subset(rawDat, gene_id %in% ensemblExamples)
rowMedian = apply(plotDat[,2:(ncol(plotDat)-1)], 1, median)
plotDat[,2:(ncol(plotDat)-1)] = log(plotDat[,2:(ncol(plotDat)-1)]/rowMedian,2)
plotDat = rename(plotDat, replace = stages)
plotDat = makeExpressionDF(plotDat)
s = ggplot(plotDat, aes(x = stage, y = reads, color = gene_name, group = gene_name)) +
geom_line(size = 1.2) +
labs(y = "log-scaled relative expression", x = "developmental stage", color = "gene") +
ggtitle("Relative (median) gene expression") +
theme_bw() +
theme(plot.title = element_text(size = 15, hjust = 0.5, angle = 30), legend.position = "right")
s
s = ggplot(plotDat, aes(x = stage, y = reads, color = gene_name, group = gene_name)) +
geom_line(size = 1.2) +
labs(y = "log-scaled relative expression", x = "developmental stage", color = "gene") +
ggtitle("Relative (median) gene expression") +
theme_bw() +
theme(plot.title = element_text(size = 15, hjust = 0.5),
axis.text.x = element_text(angle = 30, size = 10))
s
s = ggplot(plotDat, aes(x = stage, y = reads, color = gene_name, group = gene_name)) +
geom_line(size = 1.2) +
labs(y = "log-scaled relative expression", x = "developmental stage", color = "gene") +
ggtitle("Relative (median) gene expression") +
theme_bw() +
theme(plot.title = element_text(size = 15, hjust = 0.5),
axis.text.x = element_text(angle = 30, hjust = 1, size = 12))
s
plotDat = subset(rawDat, gene_id %in% ensemblExamples)
rowMedian = apply(plotDat[,2:(ncol(plotDat)-1)], 1, median)
plotDat[,2:(ncol(plotDat)-1)] = log(plotDat[,2:(ncol(plotDat)-1)]/rowMedian,2)
plotDat = rename(plotDat, replace = stages)
plotDat = makeExpressionDF(plotDat)
s = ggplot(plotDat, aes(x = stage, y = reads, color = gene_name, group = gene_name)) +
geom_line(size = 1.2) +
labs(y = "log-scaled relative expression", x = "developmental stage", color = "gene") +
ggtitle("Relative (median) gene expression") +
theme_bw() +
theme(plot.title = element_text(size = 15, hjust = 0.5),
axis.text.x = element_text(angle = 30, hjust = 1, size = 12))
ref
rowMedian = function(df){
df = apply(df, 1, median)
return(df)
}
rowRelative = function(df, ref, logScale = F){
df = df/ref
if(logScale == T){
df = log(df,2)
}
return(df)
}
#subset genes of interest
plotDat = subset(rawDat, gene_id %in% ensemblExamples)
#take a row median (as reference point, if not using absolute value)
temp_ind = 2:(ncol(plotDat)-1)
temp_df = plotDat[,temp_ind]
plotDat[,temp_ind] = rowRelative(temp_df,rowMedian(temp_df),T)
plotDat
#subset genes of interest
plotDat = subset(rawDat, gene_id %in% ensemblExamples)
#cleanup column names
plotDat = rename(plotDat, replace = stages)
#take a row median (as reference point, if not using absolute value)
temp_ind = 2:(ncol(plotDat)-1)
temp_df = plotDat[,temp_ind]
plotDat[,temp_ind] = rowRelative(temp_df,rowMedian(temp_df),T)
plotDat
#subset genes of interest
plotDat = subset(rawDat, gene_id %in% ensemblExamples)
#make datapoints relative to zygote
plotDat[,temp_ind] = rowRelative(temp_df,temp_df$zygote, T)
plotDat
plotDat$"gene_id"
plotDat$"zygote"
test = "zygote"
plotDat$test
plotDat[,"zygote"]
plotDat[,"gene_id"]
plotDat[,"zygote"]
plotDat[,'dome']
colnames(plotDat)
#subset genes of interest
plotDat = subset(rawDat, gene_id %in% ensemblExamples)
#cleanup column names
colnames(plotDat) = rename(colnames(plotDat), replace = stages)
colnames(plotDat)
#cleanup column names
plotDat = rename(plotDat, replace = stages)
colnames(plotDat)
plotDat[,"zygote"]
rowRelative = function(df, ref, logScale = F){
if(tolower(ref) == "median"){
x = rowMedian(df)
} else {
x = df[,ref]
}
df = df/x
if(logScale == T){
df = log(df,2)
}
return(df)
}
#take a row median (as reference point, if not using absolute value)
temp_ind = 2:(ncol(plotDat)-1)
temp_df = plotDat[,temp_ind]
plotDat[,temp_ind] = rowRelative(temp_df,"median",T)
plotDat
#subset genes of interest
plotDat = subset(rawDat, gene_id %in% ensemblExamples)
#cleanup column names
plotDat = rename(plotDat, replace = stages)
#make datapoints relative to zygote
plotDat[,temp_ind] = rowRelative(temp_df,"zygote", T)
plotDat
rowRelative = function(df, ref, logScale = F){
if(tolower(ref) == "median"){
x = rowMedian(df)
} else {
x = df[,ref]
x[which(x == 0)] = 0.001
}
df = df/x
if(logScale == T){
df = log(df,2)
}
return(df)
}
#subset genes of interest
plotDat = subset(rawDat, gene_id %in% ensemblExamples)
#cleanup column names
plotDat = rename(plotDat, replace = stages)
#make datapoints relative to zygote
plotDat[,temp_ind] = rowRelative(temp_df,"zygote", T)
plotDat
#subset genes of interest
plotDat = subset(rawDat, gene_id %in% ensemblExamples)
plotDat
#cleanup column names
plotDat = rename(plotDat, replace = stages)
plotDat
#make datapoints relative to zygote
plotDat[,temp_ind] = rowRelative(temp_df,"zygote", T)
plotDat = makeExpressionDF(plotDat)
s = ggplot(plotDat, aes(x = stage, y = reads, color = gene_name, group = gene_name)) +
geom_line(size = 1.2) +
labs(y = "log-scaled relative expression", x = "developmental stage", color = "gene") +
ggtitle("Relative (median) gene expression") +
theme_bw() +
theme(plot.title = element_text(size = 15, hjust = 0.5),
axis.text.x = element_text(angle = 30, hjust = 1, size = 12))
s
c(unique(rawDat$gene_name), unique(rawDat$gene_id))
shiny::runApp()
#load data file
rawDat = read.table("data/zfish_expression.txt", header = T, sep = "\t", stringsAsFactors = F)
#load sample-stage file
stages = read.table("data/sample-stage.txt", header = T, sep = "\t", stringsAsFactors = F)
stages = setNames(stages$stage, stages$sample)
#cleanup column names
rawDat = rename(rawDat, replace = stages)
stages
#subset genes of interest
plotDat = subset(rawDat, gene_id %in% ensemblExamples)
#cleanup column names
plotDat = rename(plotDat, replace = stages)
#load sample-stage file
stages = read.table("data/sample-stage.txt", header = T, sep = "\t", stringsAsFactors = F)
stages = setNames(stages$stage, stages$sample)
#subset genes of interest
plotDat = subset(rawDat, gene_id %in% ensemblExamples)
#cleanup column names
plotDat = rename(plotDat, replace = stages)
#load data file
rawDat = read.table("data/zfish_expression.txt", header = T, sep = "\t", stringsAsFactors = F)
#load sample-stage file
stages = read.table("data/sample-stage.txt", header = T, sep = "\t", stringsAsFactors = F)
stages = setNames(stages$stage, stages$sample)
#cleanup column names
rawDat = rename(rawDat, replace = stages)
library(plyr)
#cleanup column names
rawDat = rename(rawDat, replace = stages)
library(plyr)
#load data file
rawDat = read.table("data/zfish_expression.txt", header = T, sep = "\t", stringsAsFactors = F)
#load sample-stage file
stages = read.table("data/sample-stage.txt", header = T, sep = "\t", stringsAsFactors = F)
#cleanup column names
rawDat = rename(rawDat, replace = stages)
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
library(plyr)
#load data file
rawDat = read.table("data/zfish_expression.txt", header = T, sep = "\t", stringsAsFactors = F)
#load sample-stage file
stages = read.table("data/sample-stage.txt", header = T, sep = "\t", stringsAsFactors = F)
stages = setNames(stages$stage, stages$sample)
#cleanup column names
rawDat = rename(rawDat, replace = stages)
